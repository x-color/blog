<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>x-color&#39;s blog</title>
    <link>https://x-color.github.io/blog/</link>
    <description>Recent content on x-color&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 07 Jun 2021 09:45:00 +0900</lastBuildDate><atom:link href="https://x-color.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CloudFormationで別アカウントのリソースをパラメータで受け取る際にやるべきこと</title>
      <link>https://x-color.github.io/blog/posts/cfn-parameter-validation-fails/</link>
      <pubDate>Mon, 07 Jun 2021 09:45:00 +0900</pubDate>
      
      <guid>https://x-color.github.io/blog/posts/cfn-parameter-validation-fails/</guid>
      <description>何をするべきか 最初に結論。クロスアカウントのリソースをパラメータで受け取る際には、CloudFormationテンプレートのパラメータのタイプをString, CommaDelimitedListのどちらかにする必要がある。
Parameters: VPC: Type: String SecurityGroups: Type: CommaDelimitedList なぜStringなどしか指定できないのか CloudFormationテンプレートのパラメータとしてVPCやSecurityGroupを受け取ろうとした場合、下記のように書くことが多いと思う。
Parameters: VPC: Type: AWS::EC2::VPC::Id SecurityGroups: Type: List&amp;lt;AWS::EC2::SecurityGroup::Id&amp;gt; 単一アカウント上のリソースをパラメータに渡す際は上記がベストなのだが、クロスアカウントでリソースを参照しようとした場合、これではデプロイできない。
実際に、上記のようなCloudFormationテンプレートを用意して、デプロイ時にパラメータに別アカウントのリソースを入力した場合、下記エラーが発生してしまう。
Parameter validation failed: parameter value xxxx for parameter name yyy does not exists. CloudFormation はデプロイ前に入力値と指定されたパラメータタイプが一致しているかなどのバリデーションを実施してくれる。 この際、パラメータにAWS固有パラメータを指定していた場合は、対象のリソースが存在するかを確認してくれるのだが、ここで指定されたリソースが存在しないと判断された場合は、上記エラーが報告される。
「別アカウントには存在するリソースなのに、なぜないと判断される？」と考えそうになるが、そもそもあるアカウント上から許可なく別アカウントのリソースの存在有無を確認できたらおかしい。 なので、CloudFormationは実行されたアカウント内に対象のリソースが存在するかどうかを確認する。
というわけで、クロスアカウントでリソースを参照する場合、 CloudFormationのパラメータタイプにはリソースの存在確認が入るAWS 固有パラメータ（AWS::EC2::VPC::Id, List&amp;lt;AWS::EC2::SecurityGroup::Id&amp;gt;など）ではなく、StringかCommaDelimitedListを利用する必要がある。
なお、この話はしっかりとAWS公式のドキュメントに記載されている。
 テンプレートユーザーが異なる AWS アカウントからの入力値を入力できるようにする場合は、AWS 固有のタイプでパラメータを定義することはできません。代わりに、String タイプ (または CommaDelimitedList) タイプのパラメータを定義してください。
 パラメータ - CloudFormation
結論 CloudFormationのパラメータバリデーションは、単一アカウントのみであればとても助かる機能であり、パラメータの入力ミスを減らしてくれる。 しかし、クロスアカウントでリソース参照する場合には使うことができないので、
Parameters: VPC: Type: AWS::EC2::VPC::Id SecurityGroups: Type: List&amp;lt;AWS::EC2::SecurityGroup::Id&amp;gt; ではなく、
Parameters: VPC: Type: String SecurityGroups: Type: CommaDelimitedList としましょう。</description>
    </item>
    
    <item>
      <title>Proxy下のUbuntuでGitを最新版にアップデートするまで</title>
      <link>https://x-color.github.io/blog/posts/install-latest-git-on-ubuntu/</link>
      <pubDate>Wed, 02 Jun 2021 08:45:00 +0900</pubDate>
      
      <guid>https://x-color.github.io/blog/posts/install-latest-git-on-ubuntu/</guid>
      <description>結論 最初に結論。下記コマンドで最新版にアップデート可能
$ sudo -E add-apt-repository ppa:git-core/ppa $ sudo apt update $ sudo apt upgrade 以前にも別の開発環境の整備中に最新版にしたことがあったのだが、手順を忘れていたので、将来の自分のためにも解決に至るまでの流れを書いておく
Git のデフォルトブランチ名を変更したい 新たな開発環境（Ubuntu）の整備をしていた際に、「Git のデフォルトブランチの名前をmainにしないとなぁ」と思い、下記のコマンドでデフォルトブランチを変更・・・
$ git config --global init.defaultBranch main $ git init $ git branch * master ・・・できてない。
バージョンが古すぎて、デフォルトブランチ名の変更機能がないのかもと思い、バージョンを確認。
$ git version git version 2.25.1 案の定、変更機能が追加される前のバージョンだった。（機能追加は、Git 2.28.0 以降） というわけで、Git のバージョンアップをしなければならない。
Ubuntu に最新版をインストール 公式のドキュメント（Download for Linux and Unix）を参考にバージョンアップを実施。
$ sudo add-apt-repository ppa:git-core/ppa $ sudo apt update $ sudo apt upgrade 上記でバージョンアップ完了かと思いきや、最初のコマンドで下記エラーが出てしまう。
$ sudo add-apt-repository ppa:git-core/ppa Cannot add PPA: &amp;#39;ppa:~git-core/ubuntu/ppa&amp;#39; ERROR: &amp;#39;~git-core&amp;#39; user or team does not exist.</description>
    </item>
    
    <item>
      <title>CloudFormationで作成するリソースのタグ付けを強制する</title>
      <link>https://x-color.github.io/blog/posts/opa-cfn-tag-policy/</link>
      <pubDate>Mon, 31 May 2021 10:00:00 +0900</pubDate>
      
      <guid>https://x-color.github.io/blog/posts/opa-cfn-tag-policy/</guid>
      <description>タグ付けを忘れがち 普段の業務では単一の AWS アカウントを複数のプロダクトの開発に利用している。 その場合に気になってくるのがコスト。 気づいたときには「今月の請求が。。」みたいなことにならないためにも、どのプロダクトがどのリソースを利用しており、それぞれどの程度利用料が発生しているのかを把握することはとても重要。
このニーズを満たすために、AWS ではコスト配分タグという機能がある。これを用いることで、タグごとにリソースのコストを把握する事ができる。
自分は普段、なにかを構築する際には CloudFormation を利用する事が多い。 コスト配分タグを最大限活用するためにも可能な限りリソースにはタグ付けをするようにしている。
しかし、多くのリソースを構築していると一部リソースのタグ付けを忘れてしまうことがある。おかげでタグで追跡できないリソースが作成され、「これコストかかっているけど、どのプロダクトのリソース？」といったことが発生する。
※CloudFormation スタックのタグ付けの伝搬でいいのではと最初思っていたのだが、意外とタグが伝搬されないリソースが多いので各種リソースに明示的につけるようにしている。
忘れないために自動でテストしよう レビュー時に、テンプレートで定義されたすべてのリソースが正しくタグ付けされているかをチェックするのもいいが、そもそも「どのリソースはタグ付け可能だっけ？」となったりしてあまりにも大変。
というわけで人の手を借りずに自動でチェックさせるために、タグ付け可能なリソースがすべて適切なタグ付けがされているかをテストするための仕組みをOpen Policy Agentを用いて実装した。

ちなみに、CloudFormation は高頻度で更新がかかり、随時新たなリソースの追加やタグ付けがサポートされる。 そのため、このリポジトリでは GitHub Actions を利用して、CloudFormation の更新を追いかけ、更新があるたびにポリシーファイルを更新している。 利用する場合はなるべく最新版をダウンロードして利用してもらいたい。
テストしてみる 実際に利用してみる。今回は、タグ付け可能なリソース全てに「System」タグが付けられていることをテストする。
なお、ここにもサンプルのポリシーや CloudFormation テンプレートを用意している。
テストのための準備 ディレクトリ構成は下記とする
. ├── policy │ └── deny.rego # 実際のポリシーを定義 └── templates └── template.yaml # タグ付けされていないリソースが定義されたCloudFormationテンプレート テスト対象とする CloudFormation テンプレートは下記とする。（templates/template.yaml）
AWSTemplateFormatVersion: 2010-09-09 Parameters: VpcCidr: Type: String Resources: VPC: Type: AWS::EC2::VPC Properties: CidrBlock: !Ref VpcCidr このテンプレートでは、指定された Cidr ブロックを持つ VPC を作成するが、「System」タグを付け忘れている。</description>
    </item>
    
    
    
  </channel>
</rss>
